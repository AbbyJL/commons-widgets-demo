'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getLocaleData = exports.extractData = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _map = require('babel-runtime/core-js/map');

var _map2 = _interopRequireDefault(_map);

var extractData = exports.extractData = function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(localeFile) {
    var _extractAnnotations, content, annotations, ast, idx, len, capturing, data, token, _parseLine, key, value, startIdx, endIdx, valueStart, valueEnd;

    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.t0 = extractAnnotations;
            _context.next = 3;
            return _fsExtra2.default.readFile(localeFile, 'utf8');

          case 3:
            _context.t1 = _context.sent;
            _extractAnnotations = (0, _context.t0)(_context.t1);
            content = _extractAnnotations.content;
            annotations = _extractAnnotations.annotations;
            ast = (0, _babylon.parse)(content, { sourceType: 'module' });
            idx = 0;
            len = ast.tokens.length;
            capturing = false;
            data = {};
            // let dataStartIndex = null;
            // let dataEndIndex = null;

          case 12:
            if (!(idx < len)) {
              _context.next = 36;
              break;
            }

            token = ast.tokens[idx];

            if (!(token.type === _babylon.tokTypes._export && ast.tokens[idx + 1].type === _babylon.tokTypes._default && ast.tokens[idx + 2].type === _babylon.tokTypes.braceL)) {
              _context.next = 19;
              break;
            }

            // dataStartIndex = ast.tokens[idx + 2].end;
            capturing = true;
            idx += 3;
            _context.next = 34;
            break;

          case 19:
            if (!capturing) {
              _context.next = 33;
              break;
            }

            if (!(token.type === _babylon.tokTypes.braceR)) {
              _context.next = 24;
              break;
            }

            return _context.abrupt('break', 36);

          case 24:
            _parseLine = parseLine(ast.tokens, idx), key = _parseLine.key, value = _parseLine.value, startIdx = _parseLine.startIdx, endIdx = _parseLine.endIdx, valueStart = _parseLine.valueStart, valueEnd = _parseLine.valueEnd;

            data[key] = {
              key: key,
              value: value,
              valueStart: valueStart,
              valueEnd: valueEnd,
              startIdx: startIdx,
              endIdx: endIdx,
              source: annotations.get(key)
            };

            if (!(ast.tokens[endIdx].type !== _babylon.tokTypes.braceR)) {
              _context.next = 30;
              break;
            }

            idx = endIdx + 1;
            _context.next = 31;
            break;

          case 30:
            return _context.abrupt('break', 36);

          case 31:
            _context.next = 34;
            break;

          case 33:
            idx += 1;

          case 34:
            _context.next = 12;
            break;

          case 36:
            return _context.abrupt('return', {
              content: content,
              data: data,
              ast: ast
              // dataStartIndex,
              // dataEndIndex,
            });

          case 37:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function extractData(_x) {
    return _ref.apply(this, arguments);
  };
}();

var getLocaleData = exports.getLocaleData = function () {
  var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3(_ref3) {
    var _this = this;

    var folderPath = _ref3.folderPath,
        sourceLocale = _ref3.sourceLocale,
        supportedLocales = _ref3.supportedLocales;
    var localeFiles, localeData;
    return _regenerator2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return _fsExtra2.default.readdir(folderPath);

          case 2:
            _context3.t0 = _isLocaleFile2.default;
            localeFiles = _context3.sent.filter(_context3.t0);
            localeData = {
              path: folderPath,
              files: {}
            };
            _context3.next = 7;
            return _promise2.default.all(localeFiles.map(function () {
              var _ref4 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(file) {
                var locale;
                return _regenerator2.default.wrap(function _callee2$(_context2) {
                  while (1) {
                    switch (_context2.prev = _context2.next) {
                      case 0:
                        locale = (0, _formatLocale2.default)(file.replace(/\.(js|json)$/i, ''));

                        if (!(locale === sourceLocale || supportedLocales.indexOf(locale) > -1)) {
                          _context2.next = 8;
                          break;
                        }

                        _context2.t0 = _extends3.default;
                        _context2.t1 = {
                          file: file,
                          locale: locale
                        };
                        _context2.next = 6;
                        return extractData(_path2.default.resolve(folderPath, file));

                      case 6:
                        _context2.t2 = _context2.sent;
                        localeData.files[locale] = (0, _context2.t0)(_context2.t1, _context2.t2);

                      case 8:
                      case 'end':
                        return _context2.stop();
                    }
                  }
                }, _callee2, _this);
              }));

              return function (_x3) {
                return _ref4.apply(this, arguments);
              };
            }()));

          case 7:
            return _context3.abrupt('return', localeData);

          case 8:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));

  return function getLocaleData(_x2) {
    return _ref2.apply(this, arguments);
  };
}();

exports.parseLine = parseLine;
exports.extractAnnotations = extractAnnotations;

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _babylon = require('babylon');

var _isLocaleFile = require('../isLocaleFile');

var _isLocaleFile2 = _interopRequireDefault(_isLocaleFile);

var _formatLocale = require('../formatLocale');

var _formatLocale2 = _interopRequireDefault(_formatLocale);

var _getLoaderFiles = require('../getLoaderFiles');

var _getLoaderFiles2 = _interopRequireDefault(_getLoaderFiles);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function parseLine(tokens, startIdx) {
  var idx = startIdx;
  var token = tokens[idx];
  var keyArray = [];
  do {
    keyArray.push(typeof token.value !== 'undefined' ? token.value : token.type.label);
    idx += 1;
    token = tokens[idx];
  } while (token.type !== _babylon.tokTypes.colon);
  var valueArray = [];
  idx += 1;
  token = tokens[idx];
  var valueStart = idx;
  var valueEnd = void 0;
  do {
    if (token.type === _babylon.tokTypes.backQuote) {
      throw new Error('Template strings are not supported');
    } else {
      valueArray.push(typeof token.value !== 'undefined' ? token.value : token.type.label);
    }
    valueEnd = idx;
    idx += 1;
    token = tokens[idx];
  } while (token.type !== _babylon.tokTypes.comma && token.type !== _babylon.tokTypes.braceR);
  var value = valueArray.join('');
  return {
    key: keyArray.join(''),
    value: value,
    startIdx: startIdx,
    valueStart: valueStart,
    valueEnd: valueEnd,
    endIdx: idx
  };
}

function extractAnnotations(content) {
  var annotationRegExp = /\/\/ @key: @#@(.*)@#@.*?@source: @#@(.*)@#@/g;
  var annotations = new _map2.default();
  var match = void 0;
  /* eslint { 'no-cond-assign': 0 } */
  while ((match = annotationRegExp.exec(content)) !== null) {
    annotations.set(JSON.parse(match[1]), JSON.parse(match[2]));
  }
  return {
    content: content.replace(annotationRegExp, ''),
    annotations: annotations
  };
}

exports.default = function () {
  var _ref5 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee5(_ref6) {
    var _this2 = this;

    var sourceFolder = _ref6.sourceFolder,
        sourceLocale = _ref6.sourceLocale,
        supportedLocales = _ref6.supportedLocales;
    var loaderFiles, rawData;
    return _regenerator2.default.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return (0, _getLoaderFiles2.default)(sourceFolder);

          case 2:
            loaderFiles = _context5.sent;
            rawData = {};
            _context5.next = 6;
            return _promise2.default.all(loaderFiles.map(function () {
              var _ref7 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4(f) {
                var folderPath;
                return _regenerator2.default.wrap(function _callee4$(_context4) {
                  while (1) {
                    switch (_context4.prev = _context4.next) {
                      case 0:
                        folderPath = _path2.default.resolve(_path2.default.dirname(f));
                        _context4.next = 3;
                        return getLocaleData({
                          folderPath: folderPath,
                          sourceLocale: sourceLocale,
                          supportedLocales: supportedLocales
                        });

                      case 3:
                        rawData[folderPath] = _context4.sent;

                      case 4:
                      case 'end':
                        return _context4.stop();
                    }
                  }
                }, _callee4, _this2);
              }));

              return function (_x5) {
                return _ref7.apply(this, arguments);
              };
            }()));

          case 6:
            return _context5.abrupt('return', rawData);

          case 7:
          case 'end':
            return _context5.stop();
        }
      }
    }, _callee5, this);
  }));

  function getRawData(_x4) {
    return _ref5.apply(this, arguments);
  }

  return getRawData;
}();
//# sourceMappingURL=index.js.map
