{"version":3,"sources":["lib/generateXlfData/index.js"],"names":["generateXlfData","rawData","sourceLocale","supportedLocales","sourceFolder","exportType","isFull","toLowerCase","onlyTranslated","jsonData","allLocales","filter","locale","forEach","_declaration","_attributes","version","xliff","xmlns","folderPath","folderData","sourceFile","files","keys","data","targetFile","fileName","file","original","relative","join","path","transUnits","key","source","value","unit","id","_text","target","push","diff","length","datatype","body","xlfData","json2xml","compact","spaces"],"mappings":"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","file":"index.js","sourcesContent":["import path from 'path';\nimport xml from 'xml-js';\n\nexport default function generateXlfData({\n  rawData,\n  sourceLocale,\n  supportedLocales,\n  sourceFolder,\n  exportType,\n}) {\n  const isFull = exportType.toLowerCase() === 'full';\n  const onlyTranslated = exportType.toLowerCase() === 'translated';\n  const jsonData = {};\n  const allLocales = supportedLocales.filter(locale => locale !== sourceLocale);\n\n  allLocales.forEach((locale) => {\n    jsonData[locale] = {\n      _declaration: {\n        _attributes: {\n          version: '1.0',\n        }\n      },\n      xliff: {\n        _attributes: {\n          version: '1.2',\n          xmlns: 'urn:oasis:names:tc:xliff:document:1.2',\n        },\n      },\n    };\n  });\n\n  Object.keys(rawData).forEach((folderPath) => {\n    const folderData = rawData[folderPath];\n    const sourceFile = folderData.files[sourceLocale];\n    if (sourceFile) {\n      const keys = Object.keys(sourceFile.data);\n      supportedLocales.forEach((locale) => {\n        if (locale !== sourceLocale) {\n          const targetFile = folderData.files[locale];\n          const fileName = (targetFile && targetFile.file) || `${locale}.js`;\n          const original = path.relative(\n            sourceFolder,\n            path.join(folderData.path, fileName),\n          );\n          const transUnits = [];\n          keys.forEach((key) => {\n            if (onlyTranslated) {\n              if (\n                targetFile &&\n                targetFile.data[key] &&\n                (\n                  !targetFile.data[key].source ||\n                  targetFile.data[key].source === sourceFile.data[key].value\n                )\n              ) {\n                const unit = {\n                  _attributes: {\n                    id: `[${key}]`,\n                  },\n                  source: {\n                    _text: sourceFile.data[key].value,\n                  },\n                  target: {\n                    _text: targetFile.data[key].value\n                  },\n                };\n                transUnits.push(unit);\n              }\n            } else {\n              const diff = (\n                !targetFile ||\n                !targetFile.data[key] ||\n                (targetFile.data[key].source &&\n                  targetFile.data[key].source !== sourceFile.data[key].value)\n              );\n              if (!onlyTranslated && diff || isFull) {\n                const unit = {\n                  _attributes: {\n                    id: `[${key}]`,\n                  },\n                  source: {\n                    _text: sourceFile.data[key].value,\n                  },\n                  target: {\n                    _text: diff ?\n                      sourceFile.data[key].value :\n                      targetFile.data[key].value\n                  },\n                };\n                transUnits.push(unit);\n              }\n            }\n          });\n          if (transUnits.length) {\n            const data = {\n              _attributes: {\n                original,\n                'source-language': sourceLocale,\n                'target-language': locale,\n                datatype: 'plaintext',\n              },\n              body: {\n                'trans-unit': transUnits,\n              },\n            };\n            if (!jsonData[locale].xliff.file) {\n              jsonData[locale].xliff.file = [];\n            }\n            jsonData[locale].xliff.file.push(data);\n          }\n        }\n      });\n    }\n  });\n  const xlfData = {};\n  allLocales.forEach((locale) => {\n    xlfData[locale] = xml.json2xml(jsonData[locale], { compact: true, spaces: 4 });\n  });\n  return xlfData;\n}\n"]}