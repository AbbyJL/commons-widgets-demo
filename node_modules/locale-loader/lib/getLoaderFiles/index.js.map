{"version":3,"sources":["lib/getLoaderFiles/index.js"],"names":["folder","resolve","reject","err","m","fileList","loaderFiles","all","map","file","stat","isFile","readFile","content","add","getLoaderFiles"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA;;;;;;;wEAMe,kBAA8BA,MAA9B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACU,sBAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtD,kCAAQF,MAAR,UAAqB,UAACG,GAAD,EAAMC,CAAN,EAAY;AAC/B;AACA,oBAAID,GAAJ,EAAS;AACP,yBAAOD,OAAOC,GAAP,CAAP;AACD;AACD,uBAAOF,QAAQG,CAAR,CAAP;AACD,eAND;AAOD,aARsB,CADV;;AAAA;AACPC,oBADO;AAUPC,uBAVO,GAUO,mBAVP;AAAA;AAAA,mBAWP,kBAAQC,GAAR,CAAYF,SAASG,GAAT;AAAA,qFAAa,iBAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAClB,kBAAGC,IAAH,CAAQD,IAAR,CADkB;;AAAA;AAAA,2CACHE,MADG;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAEL,kBAAGC,QAAH,CAAYH,IAAZ,EAAkB,MAAlB,CAFK;;AAAA;AAErBI,+BAFqB;;AAG3B,4BAAI,4BAAaA,OAAb,CAAJ,EAA2B;AACzBP,sCAAYQ,GAAZ,CAAgBL,IAAhB;AACD;;AAL0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAb;;AAAA;AAAA;AAAA;AAAA,gBAAZ,CAXO;;AAAA;AAAA,yFAmBFH,WAnBE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;WAAeS,c;;;;SAAAA,c","file":"index.js","sourcesContent":["import fs from 'fs-extra';\r\nimport glob from 'glob';\r\nimport isLoaderFile from '../isLoaderFile';\r\n\r\n/**\r\n * @function\r\n * @description Return all the loader file paths in the specified folder.\r\n * @param {String} folder\r\n * @returns {Promise<String[]>}\r\n */\r\nexport default async function getLoaderFiles(folder) {\r\n  const fileList = await new Promise((resolve, reject) => {\r\n    glob(`${folder}/**`, (err, m) => {\r\n      /* istanbul ignore if */\r\n      if (err) {\r\n        return reject(err);\r\n      }\r\n      return resolve(m);\r\n    });\r\n  });\r\n  const loaderFiles = new Set();\r\n  await Promise.all(fileList.map(async (file) => {\r\n    if ((await fs.stat(file)).isFile()) {\r\n      const content = await fs.readFile(file, 'utf8');\r\n      if (isLoaderFile(content)) {\r\n        loaderFiles.add(file);\r\n      }\r\n    }\r\n  }));\r\n  return [...loaderFiles];\r\n}\r\n"]}