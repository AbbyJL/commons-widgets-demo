'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _set = require('babel-runtime/core-js/set');

var _set2 = _interopRequireDefault(_set);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _glob = require('glob');

var _glob2 = _interopRequireDefault(_glob);

var _isLoaderFile = require('../isLoaderFile');

var _isLoaderFile2 = _interopRequireDefault(_isLoaderFile);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @function
 * @description Return all the loader file paths in the specified folder.
 * @param {String} folder
 * @returns {Promise<String[]>}
 */
exports.default = function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(folder) {
    var _this = this;

    var fileList, loaderFiles;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return new _promise2.default(function (resolve, reject) {
              (0, _glob2.default)(folder + '/**', function (err, m) {
                /* istanbul ignore if */
                if (err) {
                  return reject(err);
                }
                return resolve(m);
              });
            });

          case 2:
            fileList = _context2.sent;
            loaderFiles = new _set2.default();
            _context2.next = 6;
            return _promise2.default.all(fileList.map(function () {
              var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(file) {
                var content;
                return _regenerator2.default.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        _context.next = 2;
                        return _fsExtra2.default.stat(file);

                      case 2:
                        if (!_context.sent.isFile()) {
                          _context.next = 7;
                          break;
                        }

                        _context.next = 5;
                        return _fsExtra2.default.readFile(file, 'utf8');

                      case 5:
                        content = _context.sent;

                        if ((0, _isLoaderFile2.default)(content)) {
                          loaderFiles.add(file);
                        }

                      case 7:
                      case 'end':
                        return _context.stop();
                    }
                  }
                }, _callee, _this);
              }));

              return function (_x2) {
                return _ref2.apply(this, arguments);
              };
            }()));

          case 6:
            return _context2.abrupt('return', [].concat((0, _toConsumableArray3.default)(loaderFiles)));

          case 7:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  function getLoaderFiles(_x) {
    return _ref.apply(this, arguments);
  }

  return getLoaderFiles;
}();
//# sourceMappingURL=index.js.map
